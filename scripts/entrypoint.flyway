#!/bin/bash

CONFIGFILE=/opt/flyway/conf/flyway.conf


settle_deadline=$(expr $(date +%s) + 40)
timeout() {
  local now=$(date +%s)
  if [ $now -gt $settle_deadline ]; then
    echo timeout >&2
    return 0
  else
    echo "remaining settle time: $(expr $settle_deadline - $now)" >&2
    return 1
  fi
}


driver() {
  if [ -f "$CONFIGFILE" ]; then
    sed -n 's/^flyway\.url=jdbc:\([^:][^:]*\):.*/\1/p' "$CONFIGFILE"
  fi
}

user() {
  if [ -f "$CONFIGFILE" ]; then
    sed -n 's/^flyway\.user=\([^:][^:]*\)$/\1/p' "$CONFIGFILE"
  fi
}

password() {
  if [ -f "$CONFIGFILE" ]; then
    sed -n 's/^flyway\.password=\([^:][^:]*\)$/\1/p' "$CONFIGFILE"
  fi
}

check-postgresql() {
  local hostname=$(sed -n 's~^flyway\.url=jdbc:postgresql://\([^/:]*\)[/:].*$~\1~p' "$CONFIGFILE")
  local port=$(sed -n 's~^flyway\.url=jdbc:postgresql://[^/:]*:\([0-9][0-9]*\)/.*$~\1~p' "$CONFIGFILE")
  local port=${port:-5432}
  echo -n "check PostgreSQL server up at ${hostname}:${port} ... "
  local status=$(nmap -v -p $port $hostname | sed -n 's/^[0-9]*\/tcp *open.*$/UP/p')
  if [ "$status" = "UP" ]; then
    echo "yes"
    return 0
  else
    echo "no"
    return 1
  fi
}

settle-postgresql() {
  while ! check-postgresql; do
    if timeout; then
      return 1
    fi
    sleep 2
  done
  return 0
}

settle-server() {
  case $(driver) in
    postgresql)
      settle-postgresql
      ;;
    *)
      ;;
  esac
}

check-config() {
  echo "looking for Flyway config '${CONFIGFILE}'"
  test -f "$CONFIGFILE"
}

settle-config() {
  while ! check-config; do
    if timeout; then
      return 1
    fi
    sleep 2
  done
  return 0
}

settle() {
  settle-config && settle-server
}

if [ "$1" = "" ]; then
  cat << EOS 1>&2
run with a Flyway command, or
run with "sh" to get a shell

Version info:
EOS
  exec /opt/flyway/flyway -v 1>&2
elif [ "$1" = "sh" ]; then
  exec /bin/bash
else
  if ! settle; then
    echo "dependencies not ready" >&2
    exit 1
  fi
  /opt/flyway/flyway "$@"
fi
